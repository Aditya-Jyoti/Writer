// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Aditya Jyoti",
            "url": "https://github.com/aditya-jyoti",
            "email": "reach@adityajyoti.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/blogs/": {
            "get": {
                "description": "Retrieves all blog entries from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Get all blog posts",
                "responses": {
                    "200": {
                        "description": "List of all blog posts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Blog"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Failed to retrieve or decode blogs",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a blog with title, description, and content. Default ` + "`" + `published` + "`" + ` to false and ` + "`" + `update_date` + "`" + ` to current time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Create a new blog post",
                "parameters": [
                    {
                        "description": "Blog input",
                        "name": "blog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateBlogInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns created blog ID",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessfulCreationResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid input",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Error: Failed to insert blog",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/blogs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a blog entry by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Get a blog post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post",
                        "schema": {
                            "$ref": "#/definitions/models.Blog"
                        }
                    },
                    "404": {
                        "description": "Error: Blog not found",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the title, description, content, and published status of a blog post by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Update a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated blog fields",
                        "name": "blog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateBlogInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message: Blog updated successfully",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid input",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Error: Failed to update blog",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a blog post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Delete a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message: Blog deleted successfully",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Error: Failed to delete blog",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Blog": {
            "description": "Represents a blog with title, description, content, and optional publish date.",
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Go makes it easy to work with concurrency by using goroutines and channels..."
                },
                "description": {
                    "type": "string",
                    "example": "This post explains how goroutines and channels work in Go."
                },
                "id": {
                    "type": "string",
                    "example": "b1d5fca3-4b5b-46f3-9d13-cf6e2d2d4e12"
                },
                "publish_date": {
                    "description": "PublishDate is the optional timestamp when the blog was or will be published",
                    "type": "string",
                    "example": "2025-05-05T09:00:00Z"
                },
                "published": {
                    "description": "@default false",
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "type": "string",
                    "example": "Understanding Go Concurrency"
                },
                "update_date": {
                    "description": "@default time.Now()",
                    "type": "string",
                    "example": "2025-05-04T12:30:00Z"
                }
            }
        },
        "models.CreateBlogInput": {
            "description": "Input structure for creating a blog post.",
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Go makes it easy to work with concurrency by using goroutines and channels..."
                },
                "description": {
                    "type": "string",
                    "example": "This post explains how goroutines and channels work in Go."
                },
                "title": {
                    "type": "string",
                    "example": "Understanding Go Concurrency"
                }
            }
        },
        "models.SuccessfulCreationResponse": {
            "description": "Represents a successful response when a new blog is created",
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "id": {
                    "type": "string",
                    "example": "b1d5fca3-4b5b-46f3-9d13-cf6e2d2d4e12"
                }
            }
        },
        "models.UpdateBlogInput": {
            "description": "Input structure for updating a blog post.",
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Go makes it easy to work with concurrency by using goroutines and channels..."
                },
                "description": {
                    "type": "string",
                    "example": "This post explains how goroutines and channels work in Go."
                },
                "published": {
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "type": "string",
                    "example": "Understanding Go Concurrency"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Provide your JWT token like: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Writer API",
	Description:      "Simple CRUD API for a blog.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
